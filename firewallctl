#!/bin/bash -e
#
# Copyright (c) 2016 Catalyst.net Ltd
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# firewallctl. Safely deploy script based firewalls in Linux. Michael Fincham <michael.fincham@catalyst.net.nz>

working_directory="/run/firewallctl"
firewall="/etc/network/firewall"
last_firewall="/etc/network/last-known-good-firewall"
declare -i rollback_seconds
rollback_seconds=$2

if [[ $rollback_seconds -le 0 ]]; then
    rollback_seconds=120
fi

umask 0077

if [[ $EUID -ne 0 ]]; then
   echo "error: $(basename $0) must be run as root." >&2
   exit 1
fi

function rollback_subprocess {
    sleep $rollback_seconds
    if rmdir "$working_directory"; then
        $last_firewall
        logger "$(basename $0): rolled back firewall!"
    fi
}

function do_start {
    if [[ -x $last_firewall ]]; then
        $last_firewall
    elif [[ -x $firewall ]]; then # first run, can't really rollback during boot so just make last = current
        $firewall
        cp "${firewall}" "${last_firewall}"
    else
        echo "error: no firewall script found" >&2
        exit 1
    fi
}

function do_configure {
    if do_status; then
        read -p "Apply this change? [y/N]" -n 1 -r
        echo ""
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if mkdir "$working_directory"; then
                rollback_subprocess </dev/null >/dev/null 2>&1 &
                disown
                $firewall
                echo ""
                echo "Applied firewall. Use \`$(basename $0) confirm' within ${rollback_seconds} seconds to confirm."
            else
                echo "error: unable to acquire lock, is another firewall confirmation already in progress?" >&2
                exit 1
            fi
        fi
    fi
}

function do_confirm {
    if rmdir "$working_directory"; then
        cp "${firewall}" "${last_firewall}"
        echo "Confirmed."
    else
        echo "error: unable to release lock, did you already confirm?" >&2
        exit 1
    fi
}

function do_rollback {
    if rmdir "$working_directory"; then
        $last_firewall
        logger "Rolled back to last known good firewall."
    else
        echo "error: unable to release lock, is there a pending confirmation?" >&2
        exit 1
    fi
}

function do_status {
    if [[ -d $working_directory ]]; then
        echo "New firewall has been applied, please confirm by running \`$(basename $0) confirm'."
        return 1
    fi

    if [[ ! -x $firewall ]]; then
        echo "No firewall found."
        return 1
    fi

    if [[ ! -x $last_firewall ]]; then
        echo "The firewall ${firewall} has not yet been applied."
        return 1
    fi

    firewall_hash="$(sha256sum < $firewall)"
    last_firewall_hash="$(sha256sum < $last_firewall)"
    if [[ $firewall_hash = $last_firewall_hash ]]; then
        echo "Running firewall is up to date."
        return 1
    elif [[ $firewall -nt $last_firewall ]]; then
        echo "A new firewall is waiting to be deployed."
        echo ""
        colors=$(tput colors); if ((colors)); then
            diff -u "${last_firewall}" "${firewall}" | sed 's/^-/\x1b[31m-/;s/^+/\x1b[32m+/;s/^@/\x1b[34m@/;s/$/\x1b[0m/'
        else
            diff -u "${last_firewall}" "${firewall}"
        fi
        echo ""
        return 0
    else
        echo "error: new firewall seems to be older than existing one!"
        exit 2
    fi
}

case "$1" in
  start)
    do_start
    ;;
  configure)
    do_configure
    ;;
  confirm)
    do_confirm
    ;;
  rollback)
    do_rollback
    ;;
  status)
    do_status
    ;;
  *)
    echo "usage: $(basename $0) [start|configure|confirm|rollback|status]" >&2
    exit 3
    ;;
esac

